#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace PolyclinicProject
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="ProjectPolyclinic")]
	public partial class DataClasses1DataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Определения метода расширяемости
    partial void OnCreated();
    partial void InsertВрачи(Врачи instance);
    partial void UpdateВрачи(Врачи instance);
    partial void DeleteВрачи(Врачи instance);
    partial void InsertАдминистратор(Администратор instance);
    partial void UpdateАдминистратор(Администратор instance);
    partial void DeleteАдминистратор(Администратор instance);
    partial void InsertРецепт(Рецепт instance);
    partial void UpdateРецепт(Рецепт instance);
    partial void DeleteРецепт(Рецепт instance);
    partial void InsertСправочник_врачей(Справочник_врачей instance);
    partial void UpdateСправочник_врачей(Справочник_врачей instance);
    partial void DeleteСправочник_врачей(Справочник_врачей instance);
    partial void InsertСправочник_диагнозов(Справочник_диагнозов instance);
    partial void UpdateСправочник_диагнозов(Справочник_диагнозов instance);
    partial void DeleteСправочник_диагнозов(Справочник_диагнозов instance);
    partial void InsertЗапись_на_прием(Запись_на_прием instance);
    partial void UpdateЗапись_на_прием(Запись_на_прием instance);
    partial void DeleteЗапись_на_прием(Запись_на_прием instance);
    partial void InsertПациент(Пациент instance);
    partial void UpdateПациент(Пациент instance);
    partial void DeleteПациент(Пациент instance);
    #endregion
		
		public DataClasses1DataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["ProjectPolyclinicConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Врачи> Врачи
		{
			get
			{
				return this.GetTable<Врачи>();
			}
		}
		
		public System.Data.Linq.Table<Администратор> Администратор
		{
			get
			{
				return this.GetTable<Администратор>();
			}
		}
		
		public System.Data.Linq.Table<Рецепт> Рецепт
		{
			get
			{
				return this.GetTable<Рецепт>();
			}
		}
		
		public System.Data.Linq.Table<Справочник_врачей> Справочник_врачей
		{
			get
			{
				return this.GetTable<Справочник_врачей>();
			}
		}
		
		public System.Data.Linq.Table<Справочник_диагнозов> Справочник_диагнозов
		{
			get
			{
				return this.GetTable<Справочник_диагнозов>();
			}
		}
		
		public System.Data.Linq.Table<Запись_на_прием> Запись_на_прием
		{
			get
			{
				return this.GetTable<Запись_на_прием>();
			}
		}
		
		public System.Data.Linq.Table<Пациент> Пациент
		{
			get
			{
				return this.GetTable<Пациент>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Врачи")]
	public partial class Врачи : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Номер_записи;
		
		private string _Логин;
		
		private string _Фио;
		
		private string _Пароль;
		
		private string _Специалист;
		
		private string _График_работы;
		
		private int _Участок;
		
		private EntitySet<Рецепт> _Рецепт;
		
		private EntitySet<Запись_на_прием> _Запись_на_прием;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnНомер_записиChanging(int value);
    partial void OnНомер_записиChanged();
    partial void OnЛогинChanging(string value);
    partial void OnЛогинChanged();
    partial void OnФиоChanging(string value);
    partial void OnФиоChanged();
    partial void OnПарольChanging(string value);
    partial void OnПарольChanged();
    partial void OnСпециалистChanging(string value);
    partial void OnСпециалистChanged();
    partial void OnГрафик_работыChanging(string value);
    partial void OnГрафик_работыChanged();
    partial void OnУчастокChanging(int value);
    partial void OnУчастокChanged();
    #endregion
		
		public Врачи()
		{
			this._Рецепт = new EntitySet<Рецепт>(new Action<Рецепт>(this.attach_Рецепт), new Action<Рецепт>(this.detach_Рецепт));
			this._Запись_на_прием = new EntitySet<Запись_на_прием>(new Action<Запись_на_прием>(this.attach_Запись_на_прием), new Action<Запись_на_прием>(this.detach_Запись_на_прием));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Номер записи]", Storage="_Номер_записи", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Номер_записи
		{
			get
			{
				return this._Номер_записи;
			}
			set
			{
				if ((this._Номер_записи != value))
				{
					this.OnНомер_записиChanging(value);
					this.SendPropertyChanging();
					this._Номер_записи = value;
					this.SendPropertyChanged("Номер_записи");
					this.OnНомер_записиChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Логин", DbType="NChar(10) NOT NULL", CanBeNull=false)]
		public string Логин
		{
			get
			{
				return this._Логин;
			}
			set
			{
				if ((this._Логин != value))
				{
					this.OnЛогинChanging(value);
					this.SendPropertyChanging();
					this._Логин = value;
					this.SendPropertyChanged("Логин");
					this.OnЛогинChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Фио", DbType="NChar(30) NOT NULL", CanBeNull=false)]
		public string Фио
		{
			get
			{
				return this._Фио;
			}
			set
			{
				if ((this._Фио != value))
				{
					this.OnФиоChanging(value);
					this.SendPropertyChanging();
					this._Фио = value;
					this.SendPropertyChanged("Фио");
					this.OnФиоChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Пароль", DbType="NChar(10) NOT NULL", CanBeNull=false)]
		public string Пароль
		{
			get
			{
				return this._Пароль;
			}
			set
			{
				if ((this._Пароль != value))
				{
					this.OnПарольChanging(value);
					this.SendPropertyChanging();
					this._Пароль = value;
					this.SendPropertyChanged("Пароль");
					this.OnПарольChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Специалист", DbType="NChar(20) NOT NULL", CanBeNull=false)]
		public string Специалист
		{
			get
			{
				return this._Специалист;
			}
			set
			{
				if ((this._Специалист != value))
				{
					this.OnСпециалистChanging(value);
					this.SendPropertyChanging();
					this._Специалист = value;
					this.SendPropertyChanged("Специалист");
					this.OnСпециалистChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[График работы]", Storage="_График_работы", DbType="NChar(30) NOT NULL", CanBeNull=false)]
		public string График_работы
		{
			get
			{
				return this._График_работы;
			}
			set
			{
				if ((this._График_работы != value))
				{
					this.OnГрафик_работыChanging(value);
					this.SendPropertyChanging();
					this._График_работы = value;
					this.SendPropertyChanged("График_работы");
					this.OnГрафик_работыChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Участок", DbType="Int NOT NULL")]
		public int Участок
		{
			get
			{
				return this._Участок;
			}
			set
			{
				if ((this._Участок != value))
				{
					this.OnУчастокChanging(value);
					this.SendPropertyChanging();
					this._Участок = value;
					this.SendPropertyChanged("Участок");
					this.OnУчастокChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Врачи_Рецепт", Storage="_Рецепт", ThisKey="Номер_записи", OtherKey="Номер_врача")]
		public EntitySet<Рецепт> Рецепт
		{
			get
			{
				return this._Рецепт;
			}
			set
			{
				this._Рецепт.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Врачи_Запись_на_прием", Storage="_Запись_на_прием", ThisKey="Номер_записи", OtherKey="Номер_врача")]
		public EntitySet<Запись_на_прием> Запись_на_прием
		{
			get
			{
				return this._Запись_на_прием;
			}
			set
			{
				this._Запись_на_прием.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Рецепт(Рецепт entity)
		{
			this.SendPropertyChanging();
			entity.Врачи = this;
		}
		
		private void detach_Рецепт(Рецепт entity)
		{
			this.SendPropertyChanging();
			entity.Врачи = null;
		}
		
		private void attach_Запись_на_прием(Запись_на_прием entity)
		{
			this.SendPropertyChanging();
			entity.Врачи = this;
		}
		
		private void detach_Запись_на_прием(Запись_на_прием entity)
		{
			this.SendPropertyChanging();
			entity.Врачи = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Администратор")]
	public partial class Администратор : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Номер_записи;
		
		private string _Фио;
		
		private string _Логин;
		
		private string _Пароль;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnНомер_записиChanging(int value);
    partial void OnНомер_записиChanged();
    partial void OnФиоChanging(string value);
    partial void OnФиоChanged();
    partial void OnЛогинChanging(string value);
    partial void OnЛогинChanged();
    partial void OnПарольChanging(string value);
    partial void OnПарольChanged();
    #endregion
		
		public Администратор()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Номер записи]", Storage="_Номер_записи", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Номер_записи
		{
			get
			{
				return this._Номер_записи;
			}
			set
			{
				if ((this._Номер_записи != value))
				{
					this.OnНомер_записиChanging(value);
					this.SendPropertyChanging();
					this._Номер_записи = value;
					this.SendPropertyChanged("Номер_записи");
					this.OnНомер_записиChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Фио", DbType="NChar(30) NOT NULL", CanBeNull=false)]
		public string Фио
		{
			get
			{
				return this._Фио;
			}
			set
			{
				if ((this._Фио != value))
				{
					this.OnФиоChanging(value);
					this.SendPropertyChanging();
					this._Фио = value;
					this.SendPropertyChanged("Фио");
					this.OnФиоChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Логин", DbType="NChar(10) NOT NULL", CanBeNull=false)]
		public string Логин
		{
			get
			{
				return this._Логин;
			}
			set
			{
				if ((this._Логин != value))
				{
					this.OnЛогинChanging(value);
					this.SendPropertyChanging();
					this._Логин = value;
					this.SendPropertyChanged("Логин");
					this.OnЛогинChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Пароль", DbType="NChar(10) NOT NULL", CanBeNull=false)]
		public string Пароль
		{
			get
			{
				return this._Пароль;
			}
			set
			{
				if ((this._Пароль != value))
				{
					this.OnПарольChanging(value);
					this.SendPropertyChanging();
					this._Пароль = value;
					this.SendPropertyChanged("Пароль");
					this.OnПарольChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Рецепт")]
	public partial class Рецепт : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Номер_записи;
		
		private System.DateTime _Дата;
		
		private string _Название;
		
		private int @__Номер_пациента;
		
		private int _Номер_врача;
		
		private string _Назначенное_лечение;
		
		private bool _Документ_выписки;
		
		private EntityRef<Врачи> _Врачи;
		
		private EntityRef<Пациент> _Пациент;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnНомер_записиChanging(int value);
    partial void OnНомер_записиChanged();
    partial void OnДатаChanging(System.DateTime value);
    partial void OnДатаChanged();
    partial void OnНазваниеChanging(string value);
    partial void OnНазваниеChanged();
    partial void On_Номер_пациентаChanging(int value);
    partial void On_Номер_пациентаChanged();
    partial void OnНомер_врачаChanging(int value);
    partial void OnНомер_врачаChanged();
    partial void OnНазначенное_лечениеChanging(string value);
    partial void OnНазначенное_лечениеChanged();
    partial void OnДокумент_выпискиChanging(bool value);
    partial void OnДокумент_выпискиChanged();
    #endregion
		
		public Рецепт()
		{
			this._Врачи = default(EntityRef<Врачи>);
			this._Пациент = default(EntityRef<Пациент>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Номер записи]", Storage="_Номер_записи", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Номер_записи
		{
			get
			{
				return this._Номер_записи;
			}
			set
			{
				if ((this._Номер_записи != value))
				{
					this.OnНомер_записиChanging(value);
					this.SendPropertyChanging();
					this._Номер_записи = value;
					this.SendPropertyChanged("Номер_записи");
					this.OnНомер_записиChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Дата", DbType="Date NOT NULL")]
		public System.DateTime Дата
		{
			get
			{
				return this._Дата;
			}
			set
			{
				if ((this._Дата != value))
				{
					this.OnДатаChanging(value);
					this.SendPropertyChanging();
					this._Дата = value;
					this.SendPropertyChanged("Дата");
					this.OnДатаChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Название", DbType="NChar(20) NOT NULL", CanBeNull=false)]
		public string Название
		{
			get
			{
				return this._Название;
			}
			set
			{
				if ((this._Название != value))
				{
					this.OnНазваниеChanging(value);
					this.SendPropertyChanging();
					this._Название = value;
					this.SendPropertyChanged("Название");
					this.OnНазваниеChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[[Номер пациента]", Storage="__Номер_пациента", DbType="Int NOT NULL")]
		public int _Номер_пациента
		{
			get
			{
				return this.@__Номер_пациента;
			}
			set
			{
				if ((this.@__Номер_пациента != value))
				{
					this.On_Номер_пациентаChanging(value);
					this.SendPropertyChanging();
					this.@__Номер_пациента = value;
					this.SendPropertyChanged("_Номер_пациента");
					this.On_Номер_пациентаChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Номер врача]", Storage="_Номер_врача", DbType="Int NOT NULL")]
		public int Номер_врача
		{
			get
			{
				return this._Номер_врача;
			}
			set
			{
				if ((this._Номер_врача != value))
				{
					this.OnНомер_врачаChanging(value);
					this.SendPropertyChanging();
					this._Номер_врача = value;
					this.SendPropertyChanged("Номер_врача");
					this.OnНомер_врачаChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Назначенное лечение]", Storage="_Назначенное_лечение", DbType="NChar(100) NOT NULL", CanBeNull=false)]
		public string Назначенное_лечение
		{
			get
			{
				return this._Назначенное_лечение;
			}
			set
			{
				if ((this._Назначенное_лечение != value))
				{
					this.OnНазначенное_лечениеChanging(value);
					this.SendPropertyChanging();
					this._Назначенное_лечение = value;
					this.SendPropertyChanged("Назначенное_лечение");
					this.OnНазначенное_лечениеChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Документ выписки]", Storage="_Документ_выписки", DbType="Bit NOT NULL")]
		public bool Документ_выписки
		{
			get
			{
				return this._Документ_выписки;
			}
			set
			{
				if ((this._Документ_выписки != value))
				{
					this.OnДокумент_выпискиChanging(value);
					this.SendPropertyChanging();
					this._Документ_выписки = value;
					this.SendPropertyChanged("Документ_выписки");
					this.OnДокумент_выпискиChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Врачи_Рецепт", Storage="_Врачи", ThisKey="Номер_врача", OtherKey="Номер_записи", IsForeignKey=true)]
		public Врачи Врачи
		{
			get
			{
				return this._Врачи.Entity;
			}
			set
			{
				Врачи previousValue = this._Врачи.Entity;
				if (((previousValue != value) 
							|| (this._Врачи.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Врачи.Entity = null;
						previousValue.Рецепт.Remove(this);
					}
					this._Врачи.Entity = value;
					if ((value != null))
					{
						value.Рецепт.Add(this);
						this._Номер_врача = value.Номер_записи;
					}
					else
					{
						this._Номер_врача = default(int);
					}
					this.SendPropertyChanged("Врачи");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Пациент_Рецепт", Storage="_Пациент", ThisKey="_Номер_пациента", OtherKey="Номер_записи", IsForeignKey=true)]
		public Пациент Пациент
		{
			get
			{
				return this._Пациент.Entity;
			}
			set
			{
				Пациент previousValue = this._Пациент.Entity;
				if (((previousValue != value) 
							|| (this._Пациент.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Пациент.Entity = null;
						previousValue.Рецепт.Remove(this);
					}
					this._Пациент.Entity = value;
					if ((value != null))
					{
						value.Рецепт.Add(this);
						this.@__Номер_пациента = value.Номер_записи;
					}
					else
					{
						this.@__Номер_пациента = default(int);
					}
					this.SendPropertyChanged("Пациент");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[Справочник врачей]")]
	public partial class Справочник_врачей : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Номер_записи;
		
		private string _Название;
		
		private string _Описание;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnНомер_записиChanging(int value);
    partial void OnНомер_записиChanged();
    partial void OnНазваниеChanging(string value);
    partial void OnНазваниеChanged();
    partial void OnОписаниеChanging(string value);
    partial void OnОписаниеChanged();
    #endregion
		
		public Справочник_врачей()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Номер записи]", Storage="_Номер_записи", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Номер_записи
		{
			get
			{
				return this._Номер_записи;
			}
			set
			{
				if ((this._Номер_записи != value))
				{
					this.OnНомер_записиChanging(value);
					this.SendPropertyChanging();
					this._Номер_записи = value;
					this.SendPropertyChanged("Номер_записи");
					this.OnНомер_записиChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Название", DbType="NChar(30) NOT NULL", CanBeNull=false)]
		public string Название
		{
			get
			{
				return this._Название;
			}
			set
			{
				if ((this._Название != value))
				{
					this.OnНазваниеChanging(value);
					this.SendPropertyChanging();
					this._Название = value;
					this.SendPropertyChanged("Название");
					this.OnНазваниеChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Описание", DbType="NChar(100) NOT NULL", CanBeNull=false)]
		public string Описание
		{
			get
			{
				return this._Описание;
			}
			set
			{
				if ((this._Описание != value))
				{
					this.OnОписаниеChanging(value);
					this.SendPropertyChanging();
					this._Описание = value;
					this.SendPropertyChanged("Описание");
					this.OnОписаниеChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[Справочник диагнозов]")]
	public partial class Справочник_диагнозов : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Номер_записи;
		
		private string _Номер_болезни;
		
		private string _Описание;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnНомер_записиChanging(int value);
    partial void OnНомер_записиChanged();
    partial void OnНомер_болезниChanging(string value);
    partial void OnНомер_болезниChanged();
    partial void OnОписаниеChanging(string value);
    partial void OnОписаниеChanged();
    #endregion
		
		public Справочник_диагнозов()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Номер записи]", Storage="_Номер_записи", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Номер_записи
		{
			get
			{
				return this._Номер_записи;
			}
			set
			{
				if ((this._Номер_записи != value))
				{
					this.OnНомер_записиChanging(value);
					this.SendPropertyChanging();
					this._Номер_записи = value;
					this.SendPropertyChanged("Номер_записи");
					this.OnНомер_записиChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Номер болезни]", Storage="_Номер_болезни", DbType="NChar(30) NOT NULL", CanBeNull=false)]
		public string Номер_болезни
		{
			get
			{
				return this._Номер_болезни;
			}
			set
			{
				if ((this._Номер_болезни != value))
				{
					this.OnНомер_болезниChanging(value);
					this.SendPropertyChanging();
					this._Номер_болезни = value;
					this.SendPropertyChanged("Номер_болезни");
					this.OnНомер_болезниChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Описание", DbType="NChar(100) NOT NULL", CanBeNull=false)]
		public string Описание
		{
			get
			{
				return this._Описание;
			}
			set
			{
				if ((this._Описание != value))
				{
					this.OnОписаниеChanging(value);
					this.SendPropertyChanging();
					this._Описание = value;
					this.SendPropertyChanged("Описание");
					this.OnОписаниеChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[Запись на прием]")]
	public partial class Запись_на_прием : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Номер_записи;
		
		private System.Nullable<System.DateTime> _Дата_обращения;
		
		private string _Специалист;
		
		private int _Участок;
		
		private System.Nullable<int> @__Номер_пациента;
		
		private System.DateTime _Дата_приема;
		
		private int _Номер_врача;
		
		private string _Причина_обращения;
		
		private string _Статус_заявки;
		
		private System.TimeSpan _Время;
		
		private EntityRef<Врачи> _Врачи;
		
		private EntityRef<Пациент> _Пациент;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnНомер_записиChanging(int value);
    partial void OnНомер_записиChanged();
    partial void OnДата_обращенияChanging(System.Nullable<System.DateTime> value);
    partial void OnДата_обращенияChanged();
    partial void OnСпециалистChanging(string value);
    partial void OnСпециалистChanged();
    partial void OnУчастокChanging(int value);
    partial void OnУчастокChanged();
    partial void On_Номер_пациентаChanging(System.Nullable<int> value);
    partial void On_Номер_пациентаChanged();
    partial void OnДата_приемаChanging(System.DateTime value);
    partial void OnДата_приемаChanged();
    partial void OnНомер_врачаChanging(int value);
    partial void OnНомер_врачаChanged();
    partial void OnПричина_обращенияChanging(string value);
    partial void OnПричина_обращенияChanged();
    partial void OnСтатус_заявкиChanging(string value);
    partial void OnСтатус_заявкиChanged();
    partial void OnВремяChanging(System.TimeSpan value);
    partial void OnВремяChanged();
    #endregion
		
		public Запись_на_прием()
		{
			this._Врачи = default(EntityRef<Врачи>);
			this._Пациент = default(EntityRef<Пациент>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Номер записи]", Storage="_Номер_записи", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Номер_записи
		{
			get
			{
				return this._Номер_записи;
			}
			set
			{
				if ((this._Номер_записи != value))
				{
					this.OnНомер_записиChanging(value);
					this.SendPropertyChanging();
					this._Номер_записи = value;
					this.SendPropertyChanged("Номер_записи");
					this.OnНомер_записиChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Дата обращения]", Storage="_Дата_обращения", DbType="Date")]
		public System.Nullable<System.DateTime> Дата_обращения
		{
			get
			{
				return this._Дата_обращения;
			}
			set
			{
				if ((this._Дата_обращения != value))
				{
					this.OnДата_обращенияChanging(value);
					this.SendPropertyChanging();
					this._Дата_обращения = value;
					this.SendPropertyChanged("Дата_обращения");
					this.OnДата_обращенияChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Специалист", DbType="VarChar(20)")]
		public string Специалист
		{
			get
			{
				return this._Специалист;
			}
			set
			{
				if ((this._Специалист != value))
				{
					this.OnСпециалистChanging(value);
					this.SendPropertyChanging();
					this._Специалист = value;
					this.SendPropertyChanged("Специалист");
					this.OnСпециалистChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Участок", DbType="Int NOT NULL")]
		public int Участок
		{
			get
			{
				return this._Участок;
			}
			set
			{
				if ((this._Участок != value))
				{
					this.OnУчастокChanging(value);
					this.SendPropertyChanging();
					this._Участок = value;
					this.SendPropertyChanged("Участок");
					this.OnУчастокChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[[Номер пациента]", Storage="__Номер_пациента", DbType="Int")]
		public System.Nullable<int> _Номер_пациента
		{
			get
			{
				return this.@__Номер_пациента;
			}
			set
			{
				if ((this.@__Номер_пациента != value))
				{
					this.On_Номер_пациентаChanging(value);
					this.SendPropertyChanging();
					this.@__Номер_пациента = value;
					this.SendPropertyChanged("_Номер_пациента");
					this.On_Номер_пациентаChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Дата приема]", Storage="_Дата_приема", DbType="DateTime NOT NULL")]
		public System.DateTime Дата_приема
		{
			get
			{
				return this._Дата_приема;
			}
			set
			{
				if ((this._Дата_приема != value))
				{
					this.OnДата_приемаChanging(value);
					this.SendPropertyChanging();
					this._Дата_приема = value;
					this.SendPropertyChanged("Дата_приема");
					this.OnДата_приемаChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Номер врача]", Storage="_Номер_врача", DbType="Int NOT NULL")]
		public int Номер_врача
		{
			get
			{
				return this._Номер_врача;
			}
			set
			{
				if ((this._Номер_врача != value))
				{
					this.OnНомер_врачаChanging(value);
					this.SendPropertyChanging();
					this._Номер_врача = value;
					this.SendPropertyChanged("Номер_врача");
					this.OnНомер_врачаChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Причина обращения]", Storage="_Причина_обращения", DbType="VarChar(MAX)")]
		public string Причина_обращения
		{
			get
			{
				return this._Причина_обращения;
			}
			set
			{
				if ((this._Причина_обращения != value))
				{
					this.OnПричина_обращенияChanging(value);
					this.SendPropertyChanging();
					this._Причина_обращения = value;
					this.SendPropertyChanged("Причина_обращения");
					this.OnПричина_обращенияChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Статус заявки]", Storage="_Статус_заявки", DbType="NChar(30) NOT NULL", CanBeNull=false)]
		public string Статус_заявки
		{
			get
			{
				return this._Статус_заявки;
			}
			set
			{
				if ((this._Статус_заявки != value))
				{
					this.OnСтатус_заявкиChanging(value);
					this.SendPropertyChanging();
					this._Статус_заявки = value;
					this.SendPropertyChanged("Статус_заявки");
					this.OnСтатус_заявкиChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Время", DbType="Time NOT NULL")]
		public System.TimeSpan Время
		{
			get
			{
				return this._Время;
			}
			set
			{
				if ((this._Время != value))
				{
					this.OnВремяChanging(value);
					this.SendPropertyChanging();
					this._Время = value;
					this.SendPropertyChanged("Время");
					this.OnВремяChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Врачи_Запись_на_прием", Storage="_Врачи", ThisKey="Номер_врача", OtherKey="Номер_записи", IsForeignKey=true)]
		public Врачи Врачи
		{
			get
			{
				return this._Врачи.Entity;
			}
			set
			{
				Врачи previousValue = this._Врачи.Entity;
				if (((previousValue != value) 
							|| (this._Врачи.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Врачи.Entity = null;
						previousValue.Запись_на_прием.Remove(this);
					}
					this._Врачи.Entity = value;
					if ((value != null))
					{
						value.Запись_на_прием.Add(this);
						this._Номер_врача = value.Номер_записи;
					}
					else
					{
						this._Номер_врача = default(int);
					}
					this.SendPropertyChanged("Врачи");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Пациент_Запись_на_прием", Storage="_Пациент", ThisKey="_Номер_пациента", OtherKey="Номер_записи", IsForeignKey=true)]
		public Пациент Пациент
		{
			get
			{
				return this._Пациент.Entity;
			}
			set
			{
				Пациент previousValue = this._Пациент.Entity;
				if (((previousValue != value) 
							|| (this._Пациент.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Пациент.Entity = null;
						previousValue.Запись_на_прием.Remove(this);
					}
					this._Пациент.Entity = value;
					if ((value != null))
					{
						value.Запись_на_прием.Add(this);
						this.@__Номер_пациента = value.Номер_записи;
					}
					else
					{
						this.@__Номер_пациента = default(Nullable<int>);
					}
					this.SendPropertyChanged("Пациент");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Пациент")]
	public partial class Пациент : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Номер_записи;
		
		private string _Номер_полиса;
		
		private string _Фио;
		
		private string _Пароль;
		
		private int _Номер_участка;
		
		private string _Логин;
		
		private EntitySet<Рецепт> _Рецепт;
		
		private EntitySet<Запись_на_прием> _Запись_на_прием;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnНомер_записиChanging(int value);
    partial void OnНомер_записиChanged();
    partial void OnНомер_полисаChanging(string value);
    partial void OnНомер_полисаChanged();
    partial void OnФиоChanging(string value);
    partial void OnФиоChanged();
    partial void OnПарольChanging(string value);
    partial void OnПарольChanged();
    partial void OnНомер_участкаChanging(int value);
    partial void OnНомер_участкаChanged();
    partial void OnЛогинChanging(string value);
    partial void OnЛогинChanged();
    #endregion
		
		public Пациент()
		{
			this._Рецепт = new EntitySet<Рецепт>(new Action<Рецепт>(this.attach_Рецепт), new Action<Рецепт>(this.detach_Рецепт));
			this._Запись_на_прием = new EntitySet<Запись_на_прием>(new Action<Запись_на_прием>(this.attach_Запись_на_прием), new Action<Запись_на_прием>(this.detach_Запись_на_прием));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Номер записи]", Storage="_Номер_записи", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Номер_записи
		{
			get
			{
				return this._Номер_записи;
			}
			set
			{
				if ((this._Номер_записи != value))
				{
					this.OnНомер_записиChanging(value);
					this.SendPropertyChanging();
					this._Номер_записи = value;
					this.SendPropertyChanged("Номер_записи");
					this.OnНомер_записиChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Номер полиса]", Storage="_Номер_полиса", DbType="NChar(16) NOT NULL", CanBeNull=false)]
		public string Номер_полиса
		{
			get
			{
				return this._Номер_полиса;
			}
			set
			{
				if ((this._Номер_полиса != value))
				{
					this.OnНомер_полисаChanging(value);
					this.SendPropertyChanging();
					this._Номер_полиса = value;
					this.SendPropertyChanged("Номер_полиса");
					this.OnНомер_полисаChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Фио", DbType="NChar(30) NOT NULL", CanBeNull=false)]
		public string Фио
		{
			get
			{
				return this._Фио;
			}
			set
			{
				if ((this._Фио != value))
				{
					this.OnФиоChanging(value);
					this.SendPropertyChanging();
					this._Фио = value;
					this.SendPropertyChanged("Фио");
					this.OnФиоChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Пароль", DbType="VarChar(30)")]
		public string Пароль
		{
			get
			{
				return this._Пароль;
			}
			set
			{
				if ((this._Пароль != value))
				{
					this.OnПарольChanging(value);
					this.SendPropertyChanging();
					this._Пароль = value;
					this.SendPropertyChanged("Пароль");
					this.OnПарольChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Номер участка]", Storage="_Номер_участка", DbType="Int NOT NULL")]
		public int Номер_участка
		{
			get
			{
				return this._Номер_участка;
			}
			set
			{
				if ((this._Номер_участка != value))
				{
					this.OnНомер_участкаChanging(value);
					this.SendPropertyChanging();
					this._Номер_участка = value;
					this.SendPropertyChanged("Номер_участка");
					this.OnНомер_участкаChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Логин", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Логин
		{
			get
			{
				return this._Логин;
			}
			set
			{
				if ((this._Логин != value))
				{
					this.OnЛогинChanging(value);
					this.SendPropertyChanging();
					this._Логин = value;
					this.SendPropertyChanged("Логин");
					this.OnЛогинChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Пациент_Рецепт", Storage="_Рецепт", ThisKey="Номер_записи", OtherKey="_Номер_пациента")]
		public EntitySet<Рецепт> Рецепт
		{
			get
			{
				return this._Рецепт;
			}
			set
			{
				this._Рецепт.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Пациент_Запись_на_прием", Storage="_Запись_на_прием", ThisKey="Номер_записи", OtherKey="_Номер_пациента")]
		public EntitySet<Запись_на_прием> Запись_на_прием
		{
			get
			{
				return this._Запись_на_прием;
			}
			set
			{
				this._Запись_на_прием.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Рецепт(Рецепт entity)
		{
			this.SendPropertyChanging();
			entity.Пациент = this;
		}
		
		private void detach_Рецепт(Рецепт entity)
		{
			this.SendPropertyChanging();
			entity.Пациент = null;
		}
		
		private void attach_Запись_на_прием(Запись_на_прием entity)
		{
			this.SendPropertyChanging();
			entity.Пациент = this;
		}
		
		private void detach_Запись_на_прием(Запись_на_прием entity)
		{
			this.SendPropertyChanging();
			entity.Пациент = null;
		}
	}
}
#pragma warning restore 1591
